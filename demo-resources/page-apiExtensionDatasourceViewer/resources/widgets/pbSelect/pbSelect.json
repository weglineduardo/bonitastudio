{"designerVersion":"1.0.0.RC1","id":"pbSelect","name":"Select","lastUpdate":1433517553642,"template":"<div ng-class=\"{\n    'form-horizontal': properties.labelPosition === 'left' && !properties.labelHidden,\n    'row': properties.labelPosition === 'top' && !properties.labelHidden || properties.labelHidden\n    }\">\n    <div class=\"form-group\">\n        <label\n            ng-if=\"!properties.labelHidden\"\n            ng-class=\"{ 'control-label--required': properties.required }\"\n            class=\"control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 12 }}\">\n            {{ properties.label }}\n        </label>\n        <div class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\" >\n            <select\n                class=\"form-control\"\n                name=\"{{ctrl.name}}\"\n                ng-model=\"properties.value\"\n                ng-options=\"ctrl.getValue(option) as ctrl.getLabel(option) for option in properties.availableValues\"\n                ng-required=\"properties.required\"\n                ng-disabled=\"properties.disabled\">\n                <option style=\"display:none\" value=\"\">\n                    {{properties.placeholder}}\n                </option>\n            </select>\n            <div ng-messages=\"$form[ctrl.name].$dirty && $form[ctrl.name].$error \" ng-messages-include=\"forms-generic-errors.html\" role=\"alert\"></div>\n        </div>\n    </div>\n</div>\n","icon":"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#fff' d='M36.8,6.6L35.3,8l4.2,4.2l1.4,1.4l1.4-1.4L46.7,8l-1.4-1.4L41,10.8L36.8,6.6z M0,0v20h50V0H0z M1,19V1h31 v18H1z M33,1h16v18H33V1z'/><path fill='#CBD5E1' d='M36.8,6.6L35.3,8l4.2,4.2l1.4,1.4l1.4-1.4L46.7,8l-1.4-1.4L41,10.8L36.8,6.6z M0,0v20h50V0H0z M1,19V1h31 v18H1z M33,1h16v18H33V1z'/></g></svg>","controller":"function PbSelectCtrl($scope, $parse, widgetNameFactory) {\n  var ctrl = this;\n\n  function comparator(initialValue, item) {\n    return angular.equals(initialValue, ctrl.getValue(item));\n  }\n\n  function createGetter(accessor) {\n    return accessor && $parse(accessor);\n  }\n\n  this.getLabel = createGetter($scope.properties.displayedKey) || function (item) {\n    return typeof item === 'string' ? item : JSON.stringify(item);\n  };\n\n  this.getValue = createGetter($scope.properties.returnedKey) || function (item) {\n    return item;\n  };\n\n  $scope.$watch('properties.availableValues', function(items){\n    if (Array.isArray(items)) {\n      $scope.properties.value = items\n        .filter(comparator.bind(null, $scope.properties.value))\n        .reduce(function (acc, item) {\n          return ctrl.getValue(item);\n        }, undefined);\n    }\n  });\n\n  this.name = widgetNameFactory.getName('pbSelect');\n}\n","custom":false,"order":5,"properties":[{"label":"Disabled","name":"disabled","type":"boolean","defaultValue":false,"bidirectional":false},{"label":"Required","name":"required","type":"boolean","defaultValue":false,"bidirectional":false},{"label":"Label hidden","name":"labelHidden","type":"boolean","defaultValue":false,"bidirectional":false},{"label":"Label","name":"label","showFor":"properties.labelHidden.value === false","type":"text","defaultValue":"Select","bidirectional":false},{"label":"Label position","name":"labelPosition","showFor":"properties.labelHidden.value === false","type":"choice","defaultValue":"left","choiceValues":["left","top"],"bidirectional":false},{"label":"Label width","name":"labelWidth","showFor":"properties.labelHidden.value === false","type":"integer","defaultValue":4,"bidirectional":false},{"label":"Placeholder","name":"placeholder","type":"text","defaultValue":"Select an option","bidirectional":false},{"label":"Available values","name":"availableValues","type":"collection","bidirectional":false},{"label":"Value","name":"value","type":"text","bidirectional":true},{"label":"Displayed key","name":"displayedKey","caption":"The name of the key to use as label. Can be empty","type":"text","bidirectional":false},{"label":"Returned key","name":"returnedKey","caption":"The name of the key to use as value. Can be empty","type":"text","bidirectional":false}],"assets":[]}